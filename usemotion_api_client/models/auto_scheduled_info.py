# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Contact: christopher.queen@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator


class AutoScheduledInfo(BaseModel):
    """
    AutoScheduledInfo
    """
    start_date: Optional[datetime] = Field(
        None,
        alias="startDate",
        description=
        "ISO 8601 Date which is trimmed to the start of the day passed")
    deadline_type: Optional[StrictStr] = Field('SOFT', alias="deadlineType")
    schedule: Optional[StrictStr] = Field(
        'Work Hours',
        description=
        "Schedule the task must adhere to. Schedule MUST be 'Work Hours' if scheduling the task for another user."
    )
    __properties = ["startDate", "deadlineType", "schedule"]

    @validator('deadline_type')
    def deadline_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HARD', 'SOFT', 'NONE'):
            raise ValueError(
                "must be one of enum values ('HARD', 'SOFT', 'NONE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoScheduledInfo:
        """Create an instance of AutoScheduledInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoScheduledInfo:
        """Create an instance of AutoScheduledInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutoScheduledInfo.parse_obj(obj)

        _obj = AutoScheduledInfo.parse_obj({
            "start_date":
            obj.get("startDate"),
            "deadline_type":
            obj.get("deadlineType")
            if obj.get("deadlineType") is not None else 'SOFT',
            "schedule":
            obj.get("schedule")
            if obj.get("schedule") is not None else 'Work Hours'
        })
        return _obj
