# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Contact: christopher.queen@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from usemotion_api_client.models.label import Label
from usemotion_api_client.models.project import Project
from usemotion_api_client.models.status import Status
from usemotion_api_client.models.user import User
from usemotion_api_client.models.workspace import Workspace


class RecurringTask(BaseModel):
    """
    RecurringTask
    """
    workspace: Workspace = Field(...)
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    creator: User = Field(...)
    assignee: User = Field(...)
    project: Optional[Project] = None
    status: Status = Field(...)
    priority: StrictStr = Field(...)
    labels: conlist(Label) = Field(...)
    __properties = [
        "workspace", "id", "name", "description", "creator", "assignee",
        "project", "status", "priority", "labels"
    ]

    @validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ASAP', 'HIGH', 'MEDIUM', 'LOW'):
            raise ValueError(
                "must be one of enum values ('ASAP', 'HIGH', 'MEDIUM', 'LOW')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecurringTask:
        """Create an instance of RecurringTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecurringTask:
        """Create an instance of RecurringTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecurringTask.parse_obj(obj)

        _obj = RecurringTask.parse_obj({
            "workspace":
            Workspace.from_dict(obj.get("workspace"))
            if obj.get("workspace") is not None else None,
            "id":
            obj.get("id"),
            "name":
            obj.get("name"),
            "description":
            obj.get("description"),
            "creator":
            User.from_dict(obj.get("creator"))
            if obj.get("creator") is not None else None,
            "assignee":
            User.from_dict(obj.get("assignee"))
            if obj.get("assignee") is not None else None,
            "project":
            Project.from_dict(obj.get("project"))
            if obj.get("project") is not None else None,
            "status":
            Status.from_dict(obj.get("status"))
            if obj.get("status") is not None else None,
            "priority":
            obj.get("priority"),
            "labels": [Label.from_dict(_item) for _item in obj.get("labels")]
            if obj.get("labels") is not None else None
        })
        return _obj
