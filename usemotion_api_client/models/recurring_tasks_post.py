# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Contact: christopher.queen@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from usemotion_api_client.models.recurring_tasks_post_duration import RecurringTasksPostDuration


class RecurringTasksPost(BaseModel):
    """
    RecurringTasksPost
    """
    frequency: StrictStr = Field(
        ...,
        description=
        "Frequency in which the task should be scheduled. Please carefully read how to construct above."
    )
    deadline_type: Optional[StrictStr] = Field('SOFT', alias="deadlineType")
    duration: Optional[RecurringTasksPostDuration] = None
    starting_on: Optional[datetime] = Field(
        None,
        alias="startingOn",
        description=
        "ISO 8601 Date which is trimmed to the start of the day passed")
    ideal_time: Optional[StrictStr] = Field(None, alias="idealTime")
    schedule: Optional[StrictStr] = Field(
        'Work Hours', description="Schedule the task must adhere to")
    name: constr(strict=True,
                 min_length=1) = Field(...,
                                       description="Name / title of the task")
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    description: Optional[StrictStr] = None
    priority: StrictStr = Field(...)
    assignee_id: StrictStr = Field(
        ...,
        alias="assigneeId",
        description="The user id the task should be assigned too")
    __properties = [
        "frequency", "deadlineType", "duration", "startingOn", "idealTime",
        "schedule", "name", "workspaceId", "description", "priority",
        "assigneeId"
    ]

    @validator('deadline_type')
    def deadline_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HARD', 'SOFT'):
            raise ValueError("must be one of enum values ('HARD', 'SOFT')")
        return value

    @validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('HIGH', 'MEDIUM'):
            raise ValueError("must be one of enum values ('HIGH', 'MEDIUM')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecurringTasksPost:
        """Create an instance of RecurringTasksPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecurringTasksPost:
        """Create an instance of RecurringTasksPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecurringTasksPost.parse_obj(obj)

        _obj = RecurringTasksPost.parse_obj({
            "frequency":
            obj.get("frequency"),
            "deadline_type":
            obj.get("deadlineType")
            if obj.get("deadlineType") is not None else 'SOFT',
            "duration":
            RecurringTasksPostDuration.from_dict(obj.get("duration"))
            if obj.get("duration") is not None else None,
            "starting_on":
            obj.get("startingOn"),
            "ideal_time":
            obj.get("idealTime"),
            "schedule":
            obj.get("schedule")
            if obj.get("schedule") is not None else 'Work Hours',
            "name":
            obj.get("name"),
            "workspace_id":
            obj.get("workspaceId"),
            "description":
            obj.get("description"),
            "priority":
            obj.get("priority")
            if obj.get("priority") is not None else 'MEDIUM',
            "assignee_id":
            obj.get("assigneeId")
        })
        return _obj
