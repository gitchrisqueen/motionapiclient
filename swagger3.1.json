{
  "openapi": "3.1.0",
  "info": {
    "title": "Motion REST API",
    "description": "<!-- theme: warning -->\n\n> ### Rate Limit Information\n>\n> The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times\n> in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.\n\n<!-- theme: info -->\n\n> ### Note on Date Formats\n>\n> All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.**\n",
    "contact": {},
    "version": "1.0.0"
  },
  "jsonSchemaDialect": "https://json-schema.org/draft/2020-12/schema",
  "servers": [
    {
      "url": "https://api.usemotion.com/v1",
      "variables": {}
    }
  ],
  "paths": {
    "/tasks/{taskId}": {
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_updateTask",
        "description": "",
        "operationId": "TasksController_updateTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_getById",
        "description": "",
        "operationId": "TasksController_getById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_deleteTask",
        "description": "",
        "operationId": "TasksController_deleteTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_post",
        "description": "## Description Input\n\nWhen passing in a task description, the input will be treated as [GitHub Flavored Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\n",
        "operationId": "TasksController_post",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_get",
        "description": "<!-- theme: warning -->\n\n> ### Note\n>\n> By default, all tasks that are completed are left out unless\n> specifically filtered for via the status.\n",
        "operationId": "TasksController_get",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "Limit tasks returned by label on the task",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit tasks returned by the status on the task",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "description": "The id of the workspace you want tasks from. If not provided, will return tasks from all workspaces the user is a member of.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Limit tasks returned to a given project",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Limit tasks returned to those that contain this string. Case in-sensitive",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeId",
            "in": "query",
            "description": "Limit tasks returned to a specific assignee",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTasks"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/tasks/{taskId}/assignee": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_deleteAssignee",
        "description": "<!-- theme: warning -->\n\n> ### Note\n>\n> For simplicity, use this endpoint to unassign a task\n> instead of the generic update task endpoint.\n> This also prevents bugs and accidental unassignments.\n",
        "operationId": "TasksController_deleteAssignee",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/tasks/{taskId}/move": {
      "patch": {
        "tags": [
          "Tasks"
        ],
        "summary": "TasksController_moveTask",
        "description": "### Notes\n\nWhen moving tasks from one workspace to another,\nthe tasks project, status, and label(s) and assignee will all be reset\n",
        "operationId": "TasksController_moveTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/recurring-tasks": {
      "post": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "RecurringTasksController_postRecurringTask",
        "description": "## Description Input\n\nWhen passing in a task description, the input will be treated as [GitHub Flavored Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\n\n# Defining Frequencies\n\nIn order to give our API all the power that motion has to offer, we allow calls to create recurring tasks in the same way you can through the UI.\n\n## Defining specific days for a frequency\n\n<!-- theme: warning -->\n\n> ### Note\n>\n> Defining days should always be used along with a specific frequency type as defined below.\n> A array of days should never be used on its own. See examples below.\n\nWhen picking a set of specific week days, we expect it to be defined as an array with a subset of the following values.\n\n- MO - Monday\n- TU - Tuesday\n- WE - Wednesday\n- TH - Thursday\n- FR - Friday\n- SA - Saturday\n- SU - Sunday\n\nExample - `[MO, FR, SU]` would mean Monday, Friday and Sunday.\n\n## Defining a daily frequency\n\n- `daily_every_day`\n- `daily_every_week_day`\n- `daily_specific_days_$DAYS_ARRAY$`\n  - Ex: `daily_specific_days_[MO, TU, FR]`\n\n## Defining a weekly frequency\n\n- `weekly_any_day`\n- `weekly_any_week_day`\n- `weekly_specific_days_$DAYS_ARRAY$`\n  - Ex: `weekly_specific_days_[MO, TU, FR]`\n\n## Defining a bi-weekly frequency\n\n- `biweekly_first_week_specific_days_$DAYS_ARRAY$`\n  - Ex: `biweekly_first_week_specific_days_[MO, TU, FR]`\n- `biweekly_first_week_any_day`\n- `biweekly_first_week_any_week_day`\n- `biweekly_second_week_any_day`\n- `biweekly_second_week_any_week_day`\n\n## Defining a monthly frequency\n\n### Specific Week Day Options\n\nWhen choosing the 1st, 2nd, 3rd, 4th or last day of the week for the month, it takes the form of any of the following where $DAY$ can be substituted for the day code mentioned above.\n\n- `monthly_first_$DAY$`\n- `monthly_second_$DAY$`\n- `monthly_third_$DAY$`\n- `monthly_fourth_$DAY$`\n- `monthly_last_$DAY$`\n\n**Example**\n`monthly_first_MO`\n\n### Specific Day Options\n\nWhen choosing a specific day of the month, for example the 6th, it would be defined with just the number like below.\n\nExamples:\n\n- `monthly_1`\n- `monthly_15`\n- `monthly_31`\n\nIn the case you choose a numeric value for a month that does not have that many days, we will default to the last day of the month.\n\n### Specific Week Options\n\n**Any Day**\n\n- `monthly_any_day_first_week`\n- `monthly_any_day_second_week`\n- `monthly_any_day_third_week`\n- `monthly_any_day_fourth_week`\n- `monthly_any_day_last_week`\n\n**Any Week Day**\n\n- `monthly_any_week_day_first_week`\n- `monthly_any_week_day_second_week`\n- `monthly_any_week_day_third_week`\n- `monthly_any_week_day_fourth_week`\n- `monthly_any_week_day_last_week`\n\n### Other Options\n\n- `monthly_last_day_of_month`\n- `monthly_any_week_day_of_month`\n- `monthly_any_day_of_month`\n\n## Defining a quarterly frequency\n\n### First Days\n\n- `quarterly_first_day`\n- `quarterly_first_week_day`\n- `quarterly_first_$DAY$`\n  - Ex. `quarterly_first_MO`\n\n### Last Days\n\n- `quarterly_last_day`\n- `quarterly_last_week_day`\n- `quarterly_last_$DAY$`\n  - Ex. `quarterly_last_MO`\n\n### Other Options\n\n- `quarterly_any_day_first_week`\n- `quarterly_any_day_second_week`\n- `quarterly_any_day_last_week`\n- `quarterly_any_day_first_month`\n- `quarterly_any_day_second_month`\n- `quarterly_any_day_third_month`\n",
        "operationId": "RecurringTasksController_postRecurringTask",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringTasksPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringTask"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "RecurringTasksController_listRecurringTasks",
        "description": "",
        "operationId": "RecurringTasksController_listRecurringTasks",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "description": "The id of the workspace you want tasks from.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRecurringTasks"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/recurring-tasks/{taskId}": {
      "delete": {
        "tags": [
          "Recurring Tasks"
        ],
        "summary": "RecurringTasksController_deleteTask",
        "description": "",
        "operationId": "RecurringTasksController_deleteTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/comments": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "CommentsController_postComment",
        "description": "## Comment Content Input\n\nWhen posting a comment, the content will be treated as [GitHub Flavored Markdown](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\n",
        "operationId": "CommentsController_postComment",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "CommentsController_getComments",
        "description": "",
        "operationId": "CommentsController_getComments",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListComments"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "ProjectsController_getSingleProject",
        "description": "",
        "operationId": "ProjectsController_getSingleProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "ProjectsController_get",
        "description": "",
        "operationId": "ProjectsController_get",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjects"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "ProjectsController_post",
        "description": "",
        "operationId": "ProjectsController_post",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/statuses": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "StatusesController_get",
        "description": "",
        "operationId": "StatusesController_get",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "description": "",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status"
                  },
                  "description": "",
                  "contentMediaType": "application/json"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/workspaces": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "WorkspacesController_get",
        "description": "",
        "operationId": "WorkspacesController_get",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWorkspaces"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "UsersController_get",
        "description": "",
        "operationId": "UsersController_get",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Use if a previous request returned a cursor. Will page through results",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsers"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "UsersController_getMe",
        "description": "",
        "operationId": "UsersController_getMe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/schedules": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "SchedulesController_getMySchedules",
        "description": "Get a list of schedules for your user",
        "operationId": "SchedulesController_getMySchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schedule"
                  },
                  "description": "",
                  "contentMediaType": "application/json"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "CommentPost": {
        "title": "CommentPost",
        "required": [
          "taskId",
          "content"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "User": {
        "title": "User",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "Comment": {
        "title": "Comment",
        "required": [
          "id",
          "taskId",
          "content",
          "creator",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "description": "The user that created this comment"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "contentEncoding": "date-time"
          }
        }
      },
      "MetaResult": {
        "title": "MetaResult",
        "required": [
          "pageSize"
        ],
        "type": "object",
        "properties": {
          "nextCursor": {
            "type": "string",
            "description": "Returned if there are more entities to return. Pass back with the cursor param set to continue paging."
          },
          "pageSize": {
            "type": "number",
            "description": "Maximum number of entities delivered per page"
          }
        }
      },
      "ListComments": {
        "title": "ListComments",
        "required": [
          "comments"
        ],
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "Project": {
        "title": "Project",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          }
        }
      },
      "ListProjects": {
        "title": "ListProjects",
        "required": [
          "projects"
        ],
        "type": "object",
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "ProjectPost": {
        "title": "ProjectPost",
        "required": [
          "name",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "dueDate": {
            "type": "string",
            "description": "ISO 8601 Due date on the task",
            "contentEncoding": "date-time",
            "examples": [
              "2023-09-28T16:46:48.811-06:00"
            ]
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        }
      },
      "RecurringTasksPost": {
        "title": "RecurringTasksPost",
        "required": [
          "frequency",
          "name",
          "workspaceId",
          "priority",
          "assigneeId"
        ],
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "description": "Frequency in which the task should be scheduled. Please carefully read how to construct above."
          },
          "deadlineType": {
            "$ref": "#/components/schemas/DeadlineType"
          },
          "duration": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Duration"
              },
              {
                "minimum": 1.0,
                "type": "number"
              }
            ],
            "description": "A duration can be one of the following... \"REMINDER\", or a integer greater than 0"
          },
          "startingOn": {
            "type": "string",
            "description": "ISO 8601 Date which is trimmed to the start of the day passed",
            "contentEncoding": "date-time",
            "examples": [
              "2023-09-28T00:00:00Z"
            ]
          },
          "idealTime": {
            "type": "string"
          },
          "schedule": {
            "type": "string",
            "description": "Schedule the task must adhere to",
            "default": "Work Hours"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name / title of the task"
          },
          "workspaceId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority1"
          },
          "assigneeId": {
            "type": "string",
            "description": "The user id the task should be assigned too"
          }
        }
      },
      "Status": {
        "title": "Status",
        "required": [
          "name",
          "isDefaultStatus",
          "isResolvedStatus"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDefaultStatus": {
            "type": "boolean"
          },
          "isResolvedStatus": {
            "type": "boolean"
          }
        }
      },
      "Label": {
        "title": "Label",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Workspace": {
        "title": "Workspace",
        "required": [
          "id",
          "name",
          "statuses",
          "labels",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status"
            },
            "description": ""
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": ""
          },
          "type": {
            "type": "string"
          }
        }
      },
      "RecurringTask": {
        "title": "RecurringTask",
        "required": [
          "workspace",
          "id",
          "name",
          "creator",
          "assignee",
          "status",
          "priority",
          "labels"
        ],
        "type": "object",
        "properties": {
          "workspace": {
            "$ref": "#/components/schemas/Workspace"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "description": "The user that created this task"
              }
            ]
          },
          "assignee": {
            "$ref": "#/components/schemas/User"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": ""
          }
        }
      },
      "ListRecurringTasks": {
        "title": "ListRecurringTasks",
        "required": [
          "tasks"
        ],
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTask"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "DailySchedule": {
        "title": "DailySchedule",
        "required": [
          "start",
          "end"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "24 hour time format. HH:mm",
            "examples": [
              "08:30"
            ]
          },
          "end": {
            "type": "string",
            "description": "24 hour time format. HH:mm",
            "examples": [
              "18:00"
            ]
          }
        }
      },
      "ScheduleBreakout": {
        "title": "ScheduleBreakout",
        "required": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ],
        "type": "object",
        "properties": {
          "monday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "tuesday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "wednesday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "thursday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "friday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "saturday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          },
          "sunday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailySchedule"
            },
            "description": "Array could be empty if there is no range for this day"
          }
        }
      },
      "Schedule": {
        "title": "Schedule",
        "required": [
          "name",
          "isDefaultTimezone",
          "timezone",
          "schedule"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDefaultTimezone": {
            "type": "boolean"
          },
          "timezone": {
            "type": "string"
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduleBreakout"
              },
              {
                "description": "Schedule broken out by day. It is possible for a day to have more than one start/end time"
              }
            ]
          }
        }
      },
      "AutoScheduledInfo": {
        "title": "AutoScheduledInfo",
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "ISO 8601 Date which is trimmed to the start of the day passed",
            "contentEncoding": "date-time",
            "examples": [
              "2023-09-28T00:00:00Z"
            ]
          },
          "deadlineType": {
            "$ref": "#/components/schemas/DeadlineType1"
          },
          "schedule": {
            "type": "string",
            "description": "Schedule the task must adhere to. Schedule MUST be 'Work Hours' if scheduling the task for another user.",
            "default": "Work Hours"
          }
        }
      },
      "TaskPatch": {
        "title": "TaskPatch",
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name / title of the task"
          },
          "dueDate": {
            "type": "string",
            "description": "ISO 8601 Due date on the task. REQUIRED for scheduled tasks",
            "contentEncoding": "date-time",
            "examples": [
              "2023-09-28T16:46:48.822-06:00"
            ]
          },
          "duration": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Duration1"
              },
              {
                "minimum": 1.0,
                "type": "number"
              }
            ],
            "description": "A duration can be one of the following... \"NONE\", \"REMINDER\", or a integer greater than 0"
          },
          "status": {
            "type": "string",
            "description": "Defaults to workspace default status."
          },
          "autoScheduled": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoScheduledInfo"
              },
              {
                "description": "If value is defined, the \"status\" field must be either \"Auto-Scheduled\" or left blank"
              }
            ]
          },
          "projectId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Input as GitHub Flavored Markdown"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "assigneeId": {
            "type": "string",
            "description": "The user id the task should be assigned to"
          }
        }
      },
      "Task": {
        "title": "Task",
        "required": [
          "workspace",
          "id",
          "name",
          "dueDate",
          "deadlineType",
          "parentRecurringTaskId",
          "completed",
          "creator",
          "status",
          "priority",
          "labels",
          "assignees",
          "createdTime",
          "schedulingIssue"
        ],
        "type": "object",
        "properties": {
          "duration": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Duration1"
              },
              {
                "minimum": 1.0,
                "type": "number"
              }
            ],
            "description": "A duration can be one of the following... \"NONE\", \"REMINDER\", or a integer greater than 0"
          },
          "workspace": {
            "$ref": "#/components/schemas/Workspace"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "contentEncoding": "date-time"
          },
          "deadlineType": {
            "$ref": "#/components/schemas/DeadlineType1"
          },
          "parentRecurringTaskId": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "description": "The user that created this task"
              }
            ]
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": ""
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": ""
          },
          "scheduledStart": {
            "type": "string",
            "description": "The time that motion has scheduled this task to start",
            "contentEncoding": "date-time"
          },
          "createdTime": {
            "type": "string",
            "description": "The time that the task was created",
            "contentEncoding": "date-time"
          },
          "scheduledEnd": {
            "type": "string",
            "description": "The time that motion has scheduled this task to end",
            "contentEncoding": "date-time"
          },
          "schedulingIssue": {
            "type": "boolean",
            "description": "Returns true if Motion was unable to schedule this task. Check Motion directly to address"
          }
        }
      },
      "TaskPost": {
        "title": "TaskPost",
        "required": [
          "name",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "dueDate": {
            "type": "string",
            "description": "ISO 8601 Due date on the task. REQUIRED for scheduled tasks",
            "contentEncoding": "date-time",
            "examples": [
              "2023-09-28T16:46:48.821-06:00"
            ]
          },
          "duration": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Duration1"
              },
              {
                "minimum": 1.0,
                "type": "number"
              }
            ],
            "description": "A duration can be one of the following... \"NONE\", \"REMINDER\", or a integer greater than 0"
          },
          "status": {
            "type": "string",
            "description": "Defaults to workspace default status."
          },
          "autoScheduled": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoScheduledInfo"
              },
              {
                "description": "If value is defined, the \"status\" field must be either \"Auto-Scheduled\" or left blank"
              }
            ]
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name / title of the task"
          },
          "projectId": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Input as GitHub Flavored Markdown"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "assigneeId": {
            "type": "string",
            "description": "The user id the task should be assigned to"
          }
        }
      },
      "ListTasks": {
        "title": "ListTasks",
        "required": [
          "tasks"
        ],
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "MoveTask": {
        "title": "MoveTask",
        "required": [
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string"
          },
          "assigneeId": {
            "type": "string",
            "description": "The user id the task should be assigned to"
          }
        }
      },
      "ListUsers": {
        "title": "ListUsers",
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "ListWorkspaces": {
        "title": "ListWorkspaces",
        "required": [
          "workspaces"
        ],
        "type": "object",
        "properties": {
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "description": ""
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaResult"
              },
              {
                "description": "Information about the result. Contains information necessary for pagination."
              }
            ]
          }
        }
      },
      "DeadlineType": {
        "title": "DeadlineType",
        "enum": [
          "HARD",
          "SOFT"
        ],
        "type": "string"
      },
      "DeadlineType1": {
        "title": "DeadlineType1",
        "enum": [
          "HARD",
          "SOFT",
          "NONE"
        ],
        "type": "string"
      },
      "Duration": {
        "title": "Duration",
        "const": "REMINDER",
        "type": "string"
      },
      "Duration1": {
        "title": "Duration1",
        "enum": [
          "NONE",
          "REMINDER"
        ],
        "type": "string"
      },
      "Priority": {
        "title": "Priority",
        "enum": [
          "ASAP",
          "HIGH",
          "MEDIUM",
          "LOW"
        ],
        "type": "string"
      },
      "Priority1": {
        "title": "Priority1",
        "enum": [
          "HIGH",
          "MEDIUM"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Motion_API_Key": {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Motion_API_Key": []
    }
  ],
  "tags": [
    {
      "name": "Tasks",
      "description": ""
    },
    {
      "name": "Recurring Tasks",
      "description": ""
    },
    {
      "name": "Comments",
      "description": ""
    },
    {
      "name": "Projects",
      "description": ""
    },
    {
      "name": "Workspaces",
      "description": ""
    },
    {
      "name": "Users",
      "description": ""
    },
    {
      "name": "Schedules",
      "description": ""
    }
  ]
}
