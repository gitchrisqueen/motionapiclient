# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from pydantic import Field
from openapi_client.models.daily_schedule import DailySchedule
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ScheduleBreakout(BaseModel):
    """
    ScheduleBreakout
    """ # noqa: E501
    monday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    tuesday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    wednesday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    thursday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    friday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    saturday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    sunday: List[DailySchedule] = Field(description="Array could be empty if there is no range for this day")
    __properties: ClassVar[List[str]] = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ScheduleBreakout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in monday (list)
        _items = []
        if self.monday:
            for _item in self.monday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['monday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tuesday (list)
        _items = []
        if self.tuesday:
            for _item in self.tuesday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tuesday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wednesday (list)
        _items = []
        if self.wednesday:
            for _item in self.wednesday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['wednesday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thursday (list)
        _items = []
        if self.thursday:
            for _item in self.thursday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['thursday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in friday (list)
        _items = []
        if self.friday:
            for _item in self.friday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['friday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in saturday (list)
        _items = []
        if self.saturday:
            for _item in self.saturday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['saturday'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sunday (list)
        _items = []
        if self.sunday:
            for _item in self.sunday:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sunday'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ScheduleBreakout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "monday": [DailySchedule.from_dict(_item) for _item in obj.get("monday")] if obj.get("monday") is not None else None,
            "tuesday": [DailySchedule.from_dict(_item) for _item in obj.get("tuesday")] if obj.get("tuesday") is not None else None,
            "wednesday": [DailySchedule.from_dict(_item) for _item in obj.get("wednesday")] if obj.get("wednesday") is not None else None,
            "thursday": [DailySchedule.from_dict(_item) for _item in obj.get("thursday")] if obj.get("thursday") is not None else None,
            "friday": [DailySchedule.from_dict(_item) for _item in obj.get("friday")] if obj.get("friday") is not None else None,
            "saturday": [DailySchedule.from_dict(_item) for _item in obj.get("saturday")] if obj.get("saturday") is not None else None,
            "sunday": [DailySchedule.from_dict(_item) for _item in obj.get("sunday")] if obj.get("sunday") is not None else None
        })
        return _obj


