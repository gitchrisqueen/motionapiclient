# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from openapi_client.models.label import Label
from openapi_client.models.project import Project
from openapi_client.models.status import Status
from openapi_client.models.user import User
from openapi_client.models.workspace import Workspace
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RecurringTask(BaseModel):
    """
    RecurringTask
    """ # noqa: E501
    workspace: Workspace
    id: StrictStr
    name: StrictStr
    description: Optional[StrictStr] = None
    creator: User
    assignee: User
    project: Optional[Project] = None
    status: Status
    priority: StrictStr
    labels: List[Label]
    __properties: ClassVar[List[str]] = ["workspace", "id", "name", "description", "creator", "assignee", "project", "status", "priority", "labels"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ASAP', 'HIGH', 'MEDIUM', 'LOW'):
            raise ValueError("must be one of enum values ('ASAP', 'HIGH', 'MEDIUM', 'LOW')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RecurringTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RecurringTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace": Workspace.from_dict(obj.get("workspace")) if obj.get("workspace") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "creator": User.from_dict(obj.get("creator")) if obj.get("creator") is not None else None,
            "assignee": User.from_dict(obj.get("assignee")) if obj.get("assignee") is not None else None,
            "project": Project.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "status": Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "priority": obj.get("priority"),
            "labels": [Label.from_dict(_item) for _item in obj.get("labels")] if obj.get("labels") is not None else None
        })
        return _obj


