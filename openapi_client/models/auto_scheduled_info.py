# coding: utf-8

"""
    Motion REST API

    <!-- theme: warning -->  > ### Rate Limit Information > > The Motion API is currently rate limited to 12 requests per minute per user. In the event a user exceeds this rate limit 3 times > in a singe 24 hour period, their API access will be disabled and will require that they contact support to have it re-enabled.  <!-- theme: info -->  > ### Note on Date Formats > > All dates that the Motion API works with are in the format of ISO 8601. **Motion will always return dates in UTC.** 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AutoScheduledInfo(BaseModel):
    """
    AutoScheduledInfo
    """ # noqa: E501
    start_date: Optional[datetime] = Field(default=None, description="ISO 8601 Date which is trimmed to the start of the day passed", alias="startDate")
    deadline_type: Optional[StrictStr] = Field(default='SOFT', alias="deadlineType")
    schedule: Optional[StrictStr] = Field(default='Work Hours', description="Schedule the task must adhere to. Schedule MUST be 'Work Hours' if scheduling the task for another user.")
    __properties: ClassVar[List[str]] = ["startDate", "deadlineType", "schedule"]

    @field_validator('deadline_type')
    def deadline_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HARD', 'SOFT', 'NONE'):
            raise ValueError("must be one of enum values ('HARD', 'SOFT', 'NONE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AutoScheduledInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AutoScheduledInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startDate": obj.get("startDate"),
            "deadlineType": obj.get("deadlineType") if obj.get("deadlineType") is not None else 'SOFT',
            "schedule": obj.get("schedule") if obj.get("schedule") is not None else 'Work Hours'
        })
        return _obj


